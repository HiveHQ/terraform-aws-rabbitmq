#cloud-config
write_files:
  - path: /root/conf/enabled_plugins
    content: |
        [rabbitmq_management,rabbitmq_shovel,rabbitmq_shovel_management].
  - path: /root/conf/rabbitmq.config
    content: |
        %% -*- mode: erlang -*-
        %% ----------------------------------------------------------------------------
        %% RabbitMQ Configuration File.
        %%
        %% See http://www.rabbitmq.com/configure.html for details.
        %% ----------------------------------------------------------------------------
        [
           {
              rabbitmq_management,
              [
                 {rates_mode, none}
              ]
           },
           {
              rabbitmq_management_agent,
              [
                 {rates_mode, none}
              ]
           },
           {
              rabbit,
              [
                 %%
                 %% Resource Limits & Flow Control
                 %% ==============================
                 %%
                 %% See http://www.rabbitmq.com/memory.html for full details.
                 %% Memory-based Flow Control threshold.
                 %%
                 {vm_memory_high_watermark, 0.85},

                 %% Fraction of the high watermark limit at which queues start to
                 %% page message out to disc in order to free up memory.
                 %%
                 {vm_memory_high_watermark_paging_ratio, 0.65},

                 %% turns on a high performance version of erlang??
                 { loopback_users, [ ] }
              ]
           }
        ].
  - path: /root/find_hosts.sh
    content: |
        #!/usr/bin/env bash

        export AWS_DEFAULT_REGION='${region}'

        DNSES=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=${asg_name}" "Name=instance-state-name,Values=running" | jq ".Reservations[].Instances[].PrivateDnsName" | xargs)

        HOSTNAMES=()
        for dns in $DNSES; do
            hostname=($${dns//./ })
            if [ "$hostname" != "$HOSTNAME" ]; then
              HOSTNAMES+=( $hostname )
            fi
        done

        echo $HOSTNAMES
  - path: /root/bin/join_cluster.sh
    content: |
        #!/usr/bin/env sh

        HOSTNAMES=( $@ )

        for run in {1..3}; do
          sleep $[ ( $RANDOM % 10 )  + 1 ]s
          rabbitmqctl stop_app

          NEW_HOSTNAMES=()
          for hostname in $HOSTNAMES; do
            rabbitmqctl join_cluster rabbit@$hostname
            st=$?
            if [ $st -ne 0 ] && [ $st -ne 130 ]; then  # 130 is "already joined"
              NEW_HOSTNAMES+=( $hostname )
            fi
          done

          HOSTNAMES=( $${NEW_HOSTNAMES[@]} )
          rabbitmqctl start_app

          if [ $${#HOSTNAMES[@]} -eq 0 ]; then
            exit 0
          fi
        done
  - path: /root/configure.sh
    content: |
        #!/usr/bin/env bash
        docker exec rabbitmq rabbitmqctl add_user admin ${admin_password}
        docker exec rabbitmq rabbitmqctl set_user_tags admin administrator
        docker exec rabbitmq rabbitmqctl add_user rabbit ${rabbit_password}
        docker exec rabbitmq rabbitmqctl add_vhost /
        docker exec rabbitmq rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
        docker exec rabbitmq rabbitmqctl set_permissions -p / rabbit ".*" ".*" ".*"
        docker exec rabbitmq rabbitmqctl delete_user guest
        docker exec rabbitmq rabbitmqctl set_policy -p / lazy ".*" '{"queue-mode": "lazy"}'

runcmd:
  - yum update -y
  - yum install -y docker jq
  - service docker start
  - chkconfig docker on
  - usermod -a -G docker ec2-user
  - docker run -d \
    --name rabbitmq \
    --hostname $HOSTNAME \
    -p 4369:4369 \
    -p 5672:5672 \
    -p 15672:15672 \
    -p 25672:25672 \
    -e RABBITMQ_ERLANG_COOKIE='${secret_cookie}' \
    -v /root/data:/var/lib/rabbitmq \
    -v /root/conf/:/etc/rabbitmq \
    -v /root/bin:/tmp/bin rabbitmq:3-management
    --ulimit nofile=65536:65536
  - sleep 1
  - docker exec rabbitmq bash /tmp/bin/join_cluster.sh $(bash /root/find_hosts.sh)
  - sleep 1
  - bash /root/configure.sh
